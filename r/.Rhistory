# request URL using GET method
response <- GET(url = url)
View(response)
# check if request was successful
response$status_code
# check if request was successful
response$status_code == 200
response$content
# parse response
parsed_response <- content(x = response)
# find available jobs
job_nodes <- parsed_response %>% html_elements("tr.job")
job <- job_nodes[1]
title <- job %>% html_element("td.title h4") %>% html_text()
title
job %>% html_element("td.title h4 a") %>% html_attr("href")
company <- job %>% html_element("td.title p.source a") %>% html_text()
title <- job %>% html_element("td.title h4") %>% html_text()
url <- job %>% html_element("td.title h4 a") %>% html_attr("href")
company <- job %>% html_element("td.title p.source a") %>% html_text()
data.frame(
title = title,
url = url,
company = company
)
# define function to extract information from job node
extract_job <- function(job) {
title <- job %>% html_element("td.title h4") %>% html_text()
url <- job %>% html_element("td.title h4 a") %>% html_attr("href")
company <- job %>% html_element("td.title p.source a") %>% html_text()
return(data.frame(
title = title,
url = url,
company = company
))
}
# map function to all extracted nodes
job_list <- map_dfr(job_nodes, extract_job)
View(job_list)
# define url
url <- "https://jobs.github.com/positions.json"
# request URL using GET method
response <- GET(url = url)
# define url
url <- "https://jobs.github.com/positions.json"
# request URL using GET method
response <- GET(url = url)
View(response)
# check if request was successful
response$status_code == 200
# parse response
text_response <- content(x = response, as = "text")
text_response
parsed_response <- fromJSON(txt = text_response)
View(parsed_response)
# define url
url <- "https://httpbin.org/get"
# request url
response <- GET(url = url)
View(response)
# check status code
response$status_code == 200
# define url
url <- "https://httpbin.org/get/test"
# request url
response <- GET(url = url)
# check status code
response$status_code == 200
response$status_code
# define url
url <- "https://httpbin.org/get"
url <- parse_url(url = url)
url$query <- list(page=1)
url <- build_url(url = url)
url
url$query <- list(page=1, hello="world", limit=100)
# define url
url <- "https://httpbin.org/get"
url <- parse_url(url = url)
url$query <- list(page=1, hello="world", limit=100)
url <- build_url(url = url)
url
# request url
response <- GET(url = url)
# check status code
response$status_code == 200
# parse response
text_response <- content(x = response, as = "text")
parsed_response <- fromJSON(txt = text_response)
View(parsed_response)
# POST Request ----
url <- "https://httpbin.org/post"
# request url
response <- POST(url = url)
View(response)
# check status code
response$status_code == 200
# parse response
text_response <- content(x = response, as = "text")
parsed_response <- fromJSON(txt = text_response)
View(parsed_response)
?POST
# request url
response <- POST(url = url, body = list(username="Jan", password="code"))
# check status code
response$status_code == 200
# parse response
text_response <- content(x = response, as = "text")
parsed_response <- fromJSON(txt = text_response)
View(parsed_response)
# load dependencies
library(dplyr)
library(purrr)
library(httr)
library(rvest)
library(jsonlite)
# request URL using GET function
request <- GET(url = url)
View(request)
# define URL
url <- "https://httpbin.org/basic-auth/correlaid/pass"
# request URL using GET function
request <- GET(url = url)
# check if request was successful
request$status_code
# check if request was successful
request$status_code == 200
auth_header = paste("Basic ", base64_enc("correlaid:pass"))
auth_header
# request URL using GET function including authentication header
response <- GET(url = url, add_headers("Authorization", auth_header))
response$status_code
auth_header = paste("Basic ", base64_enc("correlaid:pass"))
# request URL using GET function including authentication header
response <- GET(url = url, add_headers("Authorization", auth_header))
response$status_code == 200
url
# request URL using GET function including authentication header
response <- GET(url = url, add_headers("Authorization", auth_header))
response$status_code == 200
# define URL
url <- "https://httpbin.org/basic-auth/correlaid/pass"
# request URL using GET method
response <- GET(url = url)
# check if request was successful
response$status_code == 200
# define authorization header
auth_header = paste("Basic ", base64_enc("correlaid:pass"))
# request URL using GET function including authentication header
response <- GET(url = url, add_headers("Authorization", auth_header))
response$status_code == 200
# request URL using GET function including authentication header
response <- GET(url = url, add_headers("Authorization", auth_header))
response
# define URL
url <- "https://httpbin.org/basic-auth/correlaid/pass"
# define URL
url <- "https://httpbin.org/basic-auth/correlaid/pass"
# define authorization header
auth_header = paste("Basic ", base64_enc("correlaid:pass"))
# request URL using GET function including authentication header
response <- GET(url = url, add_headers("Authorization", auth_header))
response$status_code == 200
# define URL
url <- "https://httpbin.org/basic-auth/correlaid/pass"
# request URL using GET method
response <- GET(url = url)
# check if request was successful
response$status_code == 200
# define authorization header
auth_header = paste("Basic ", base64_enc("correlaid:pass"))
# request URL using GET method adding authorization header
response <- GET(url = url,
add_headers("Authorization" = auth_header))
# parse response
text_response <- content(x = response, as = "text")
parsed_response <- fromJSON(txt = text_response)
response
devtools::install_github("jandix/rzeit2")
library("rzeit2")
rzeit2::get_article_text(url="https://www.zeit.de/gesundheit/zeit-doctor/2021-05/corona-impfung-schutz-freiheit-lockerung-wirkung-faq")
tatort_articles <- get_content(query = "Corona",
begin_date = "20210101",
end_date = "20211231")
# define url
url <- "https://httpbin.org/status/403"
# define URL
url <- "https://httpbin.org/basic-auth/correlaid/pass"
authorization header
auth_header = paste("Basic ", base64_enc("correlaid:pass"))
# request URL using GET method adding authorization header
response <- GET(url = url,
add_headers("Authorization" = auth_header))
# parse response
text_response <- content(x = response, as = "text")
parsed_response <- fromJSON(txt = text_response)
# Setup ----
# install dependencies
packages <- c("dplyr", "purrr", "httr", "rvest", "jsonlite")
install.packages(pkgs = packages)
# load dependencies
library(dplyr)
library(purrr)
library(httr)
library(rvest)
library(jsonlite)
# Setup ----
# install dependencies
packages <- c("dplyr", "purrr", "httr", "rvest", "jsonlite")
install.packages(pkgs = packages)
# load dependencies
library(dplyr)
library(purrr)
library(httr)
library(rvest)
library(jsonlite)
install.packages(pkgs = packages)
# define URL
url <- "https://httpbin.org/basic-auth/correlaid/pass"
# define authorization header
auth_header = paste("Basic ", base64_enc("correlaid:pass"))
# request URL using GET method adding authorization header
response <- GET(url = url,
add_headers("Authorization" = auth_header))
# parse response
text_response <- content(x = response, as = "text")
parsed_response <- fromJSON(txt = text_response)
# request URL using GET method using authenticate function
response <- GET(url = url,
authenticate(user = "correlaid",
password = "pass",
type = "basic"))
# parse response
text_response <- content(x = response, as = "text")
parsed_response <- fromJSON(txt = text_response)
View(parsed_response)
# request URL using GET method adding authorization header
response <- GET(url = url,
authenticate(user = user,
password = password,
type = "basic"))
authenticate <- function(user, password) {
# request URL using GET method adding authorization header
response <- GET(url = url,
authenticate(user = user,
password = password,
type = "basic"))
# parse response
text_response <- content(x = response, as = "text")
parsed_response <- fromJSON(txt = text_response)
# return authenticated key
return(parsed_response$authenticated)
}
request_url <- function(url) {
# request URL
response <- GET(url = url)
# return result if successful
if (response.status_code <= 399) {
# parse response
text_response <- content(x = response, as = "text")
parsed_response <- fromJSON(txt = text_response)
return(parsed_response)
}
# if 401 login and replace URL
else if (response.status_code == 401) {
# authenticate
authenticate()
# replace URL
url <- "https://httpbin.org/status/403"
# sleep to be polite
Sys.sleep(2)
# call same function recursively
request_url(url = url)
}
# if 403 replace URL and call function again
else if (response.status_code == 403) {
# replace URL
url <- "https://httpbin.org/json"
# sleep to be polite
Sys.sleep(2)
# call same function recursively
request_url(url = url)
}
# if any other status throw error
else {
stop_for_status(x = response)
}
}
# try 200
url <- "https://httpbin.org/json"
response <- request_url(url = url)
request_url <- function(url) {
# request URL
response <- GET(url = url)
# return result if successful
if (response$status_code <= 399) {
# parse response
text_response <- content(x = response, as = "text")
parsed_response <- fromJSON(txt = text_response)
return(parsed_response)
}
# if 401 login and replace URL
else if (response$status_code == 401) {
# authenticate
authenticate()
# replace URL
url <- "https://httpbin.org/status/403"
# sleep to be polite
Sys.sleep(2)
# call same function recursively
request_url(url = url)
}
# if 403 replace URL and call function again
else if (response$status_code == 403) {
# replace URL
url <- "https://httpbin.org/json"
# sleep to be polite
Sys.sleep(2)
# call same function recursively
request_url(url = url)
}
# if any other status throw error
else {
stop_for_status(x = response)
}
}
# try 200
url <- "https://httpbin.org/json"
response <- request_url(url = url)
View(response)
# try 403
url <- "https://httpbin.org/status/403"
response <- request_url(url = url)
View(response)
response <- request_url(url = url)
# try 401
url <- "https://httpbin.org/status/401"
response <- request_url(url = url)
# try 500
url <- "https://httpbin.org/status/500"
response <- request_url(url = url)
request_url <- function(url) {
# request URL
response <- GET(url = url)
# return result if successful
if (response$status_code <= 399) {
# parse response
text_response <- content(x = response, as = "text")
parsed_response <- fromJSON(txt = text_response)
return(parsed_response)
}
# if 403 replace URL and call function again
else if (response$status_code == 403) {
# replace URL
url <- "https://httpbin.org/json"
# sleep to be polite
Sys.sleep(2)
# call same function recursively
request_url(url = url)
}
# if 401 login and replace URL
else if (response$status_code == 401) {
# authenticate
authenticate(user = "correlaid", password = "password")
# replace URL
url <- "https://httpbin.org/status/403"
# sleep to be polite
Sys.sleep(2)
# call same function recursively
request_url(url = url)
}
# if any other status throw error
else {
stop_for_status(x = response)
}
}
# try 401
url <- "https://httpbin.org/status/401"
response <- request_url(url = url)
authenticate <- function(user, password) {
# request URL using GET method adding authorization header
response <- GET(url = "https://httpbin.org/basic-auth/correlaid/password",
authenticate(user = user,
password = password,
type = "basic"))
# parse response
text_response <- content(x = response, as = "text")
parsed_response <- fromJSON(txt = text_response)
# return authenticated key
return(parsed_response$authenticated)
}
request_url <- function(url) {
# request URL
response <- GET(url = url)
# return result if successful
if (response$status_code <= 399) {
# parse response
text_response <- content(x = response, as = "text")
parsed_response <- fromJSON(txt = text_response)
return(parsed_response)
}
# if 403 replace URL and call function again
else if (response$status_code == 403) {
# replace URL
url <- "https://httpbin.org/json"
# sleep to be polite
Sys.sleep(2)
# call same function recursively
request_url(url = url)
}
# if 401 login and replace URL
else if (response$status_code == 401) {
# authenticate
authenticate(user = "correlaid", password = "password")
# replace URL
url <- "https://httpbin.org/status/403"
# sleep to be polite
Sys.sleep(2)
# call same function recursively
request_url(url = url)
}
# if any other status throw error
else {
stop_for_status(x = response)
}
}
# try 200
url <- "https://httpbin.org/json"
response <- request_url(url = url)
# try 401
url <- "https://httpbin.org/status/401"
response <- request_url(url = url)
library(httr)
request_authentication <- function(user, password) {
# request URL using GET method adding authorization header
response <- GET(url = "https://httpbin.org/basic-auth/correlaid/password",
authenticate(user = user,
password = password,
type = "basic"))
# parse response
text_response <- content(x = response, as = "text")
parsed_response <- fromJSON(txt = text_response)
# return authenticated key
return(parsed_response$authenticated)
}
remove(authenticate)
# load dependencies
library(dplyr)
library(purrr)
library(httr)
library(rvest)
library(jsonlite)
request_authentication <- function(user, password) {
# request URL using GET method adding authorization header
response <- GET(url = "https://httpbin.org/basic-auth/correlaid/password",
authenticate(user = user,
password = password,
type = "basic"))
# parse response
text_response <- content(x = response, as = "text")
parsed_response <- fromJSON(txt = text_response)
# return authenticated key
return(parsed_response$authenticated)
}
request_url <- function(url) {
# request URL
response <- GET(url = url)
# return result if successful
if (response$status_code <= 399) {
# parse response
text_response <- content(x = response, as = "text")
parsed_response <- fromJSON(txt = text_response)
return(parsed_response)
}
# if 403 replace URL and call function again
else if (response$status_code == 403) {
# replace URL
url <- "https://httpbin.org/json"
# sleep to be polite
Sys.sleep(2)
# call same function recursively
request_url(url = url)
}
# if 401 login and replace URL
else if (response$status_code == 401) {
# authenticate
request_authentication(user = "correlaid", password = "password")
# replace URL
url <- "https://httpbin.org/status/403"
# sleep to be polite
Sys.sleep(2)
# call same function recursively
request_url(url = url)
}
# if any other status throw error
else {
stop_for_status(x = response)
}
}
# try 200
url <- "https://httpbin.org/json"
response <- request_url(url = url)
# try 403
url <- "https://httpbin.org/status/403"
response <- request_url(url = url)
# try 401
url <- "https://httpbin.org/status/401"
response <- request_url(url = url)
View(response)
# try 500
url <- "https://httpbin.org/status/500"
response <- request_url(url = url)
